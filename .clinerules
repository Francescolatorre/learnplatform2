# Roo-Code Core Governance Rules

memory_bank:
  read_strategy:
    - "Read `activeContext.md` ONCE per execution."
    - "If `activeContext.md` has an active task, read only necessary files."
    - "If no active task, read `progress.md` to determine next steps."
    - "If `progress.md` has no tasks, WAIT for new task."

  consistency_checks:
    - "Compare `activeContext.md` & `progress.md` for mismatches."
    - "If a mismatch exists, follow `inconsistency_resolution.md`."
    - "If task conflict found, escalate to Architect Mode."

  resolution_protocol:
    - "If an inconsistency exists, STOP and consult `inconsistency_resolution.md`."
    - "DO NOT proceed unless files are aligned with user confirmation."

  mandatory_reads:
    - "ALWAYS read `activeContext.md` first."
    - "ALWAYS state `[Memory Bank: active]` after reading required files."
    - "DO NOT proceed if inconsistencies exist."
    - "If a required file is missing, request it."

task_management:
  lifecycle:
    - Architect defines (`TODO`).
    - Code implements (`IN_PROGRESS`).
    - Code validates (`DONE`).
    - Architect reviews (`DONE` or revision requested).

  prioritization:
    - Critical-path tasks first.
    - Dependencies must be resolved before activation.
    - Postponed tasks reviewed in 14 days.

switching_protocol:
  Architect → Code:
    - Define task in `tasks/{TASK-ID}.md`, `progress.md`.
    - Set `TODO`, switch to Code.
  Code → Architect:
    - Mark `DONE`, request review.
  Debug <-> Code:
    - Switch if bug blocks progress.
  Emergency:
    - Log blocker in `activeContext.md`, switch mode.

status_updates:
  - Sync across `progress.md`, `tasks/{TASK-ID}.md`, `activeContext.md`.
  - Use consistent statuses: `TODO`, `IN_PROGRESS`, `DONE`, `POSTPONED`.
  - Include timestamp & reason for changes.

automation:
  - Auto-sync memory bank updates.
  - Track postponed task deadlines.
  - Use Git metadata for timestamps.

git_commit_rules:
  - **Each commit must reference `TASK-ID`.**
  - **Commit format:** `[TASK-ID] [STATUS] [SUMMARY]`
  - **Examples:**
    - `[CORE-011] IN_PROGRESS Added authentication logic`
    - `[CORE-021] DONE Refactored error handling`
  - **Commits must include validation status** (e.g., "Tests Passed", "Awaiting Review").
  - **Stage all relevant files before committing.**
  - **Squash minor commits before merging.**
  - **Merge commits must follow:** `"Merge branch {FEATURE_BRANCH} into {MAIN_BRANCH}"`.

language_specific_rules:
  - "Refer to `/languages/{LANGUAGE}_rules.yaml` for implementation guidelines."
