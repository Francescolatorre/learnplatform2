# Roo-Code Core Governance Rules

memory_bank:
  read_strategy:
    - "Read `activeContext.md` ONCE per execution"
    - "If active task exists, read only necessary files"
    - "If no active task, check `project_status.md`"
    - "If no tasks in progress, WAIT"

  consistency_checks:
    - "Compare `activeContext.md` & `project_status.md`"
    - "If mismatch exists, follow `inconsistency_resolution.md`"
    - "Escalate task conflicts to Architect Mode"

  resolution_protocol:
    - "STOP if inconsistency exists"
    - "Proceed only with user confirmation"

  mandatory_reads:
    - "Read `activeContext.md` first"
    - "State `[Memory Bank: active]` after reading"
    - "Request missing files"

task_management:
  lifecycle:
    - "Digital Design defines (DRAFT): requirements, user stories, acceptance criteria"
    - "Digital Design validates (VALIDATED): ensure completeness, business alignment"
    - "Architect refines and sets (TODO): finalize templates, identify risks, resources"
    - "Code implements (IN_PROGRESS): validate, mitigate, document, monitor"
    - "Code validates (DONE): test, review, document, update"
    - "Architect reviews: verify goals, assess quality, provide feedback"

  task_review_criteria:
    - "Completeness, clarity, resources, risks, alignment"
    - "Validated tasks must have clear requirements before moving to TODO"

  prioritization:
    - "Critical-path first, resolve dependencies, review postponed tasks"
    - "Consider complexity and constraints"

switching_protocol:
  "Digital Design → Architect": "Validate requirements, finalize specification, confirm feasibility"
  "Architect → Code": "Define task, set TODO, provide context, highlight challenges"
  "Code → Architect": "Mark DONE, document implementation, request review"
  "Debug <-> Code": "Switch if bug blocks progress"
  "Emergency": "Log blocker, switch mode, escalate"

status_updates:
  - "Sync across all task files"
  - "Use standard statuses: DRAFT, VALIDATED, TODO, IN_PROGRESS, DONE, POSTPONED"
  - "Include timestamps and reasons"
  - "Document knowledge and challenges"
  - "Digital Design Mode must verify task validity before setting VALIDATED"

automation:
  - "Auto-sync updates, track deadlines, use Git metadata"
  - "Implement quality checks"

git_commit_rules:
  - "Format: [TASK-ID] [STATUS] [SUMMARY]"
  - "Include validation status and explanation"
  - "Stage all files, squash minor commits"
  - "Proper merge format"

language_specific_rules:
  - "Follow language rules in `/languages/{LANGUAGE}_rules.yaml`"
  - "Maintain task enhancement framework principles"

Remember: After every memory reset, you begin completely fresh. Your only link to previous work is the Memory Bank. Maintain it as if your functionality depends on it - because it does.
