# memory_bank/languages/react_typescript_rules.yaml
react_version: "Specify version if relevant"
typescript_version: "Specify version if relevant"

best_practices:
  - "Use functional components with React hooks."
  - "Define TypeScript types for all props & state."
  - "Use Context API or Zustand for state management (avoid unnecessary Redux unless needed)."
  - "Component files should follow PascalCase (e.g., `MyComponent.tsx`)."
  - "Keep components small and reusable."
  - "Use absolute imports instead of relative imports where possible."
  - "Organize project structure: `components/`, `hooks/`, `context/`, `utils/`."
  - "Use ESLint & Prettier for code consistency."
  - "Use React Query for efficient data fetching (if applicable)."

security_guidelines:
  - "Escape all dynamic content to prevent XSS attacks."
  - "Avoid exposing sensitive information in client-side code."
  - "Use `react-error-boundary` for graceful error handling."
  - "Validate API requests before rendering data."

testing_requirements:
  - "Use Jest & React Testing Library for unit testing."
  - "Mock API calls using `msw`."
  - "Ensure proper test coverage before marking `DONE`."
  - "Write integration tests for complex UI interactions."

commit_rules:
  - "Follow `.clinerules` commit format."
  - "Ensure all changes follow React & TypeScript best practices."
  - "Reference `TASK-ID` in every commit."
